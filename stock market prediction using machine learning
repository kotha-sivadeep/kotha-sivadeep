{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Microsoft Stock Prediction with LSTMs.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Navaneethnani/JNTUS/blob/main/Microsoft_Stock_Prediction_with_LSTMs.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8HG9Xhc8hhQe",
        "outputId": "8b4cc11e-815a-4e03-a79e-853b6bced008"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "df = pd.read_csv('/content/drive/MyDrive/STOCK_DataSet/MSFT.csv')\n",
        "\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "PSIHfWL23fBi",
        "outputId": "a316183d-3a50-469d-e61b-ae66c0ff2443"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            Date        Open        High         Low       Close   Adj Close  \\\n",
              "0     1986-03-13    0.088542    0.101563    0.088542    0.097222    0.061434   \n",
              "1     1986-03-14    0.097222    0.102431    0.097222    0.100694    0.063628   \n",
              "2     1986-03-17    0.100694    0.103299    0.100694    0.102431    0.064725   \n",
              "3     1986-03-18    0.102431    0.103299    0.098958    0.099826    0.063079   \n",
              "4     1986-03-19    0.099826    0.100694    0.097222    0.098090    0.061982   \n",
              "...          ...         ...         ...         ...         ...         ...   \n",
              "9077  2022-03-17  293.290009  295.609985  289.369995  295.220001  295.220001   \n",
              "9078  2022-03-18  295.369995  301.000000  292.730011  300.429993  300.429993   \n",
              "9079  2022-03-21  298.890015  300.140015  294.899994  299.160004  299.160004   \n",
              "9080  2022-03-22  299.799988  305.000000  298.769989  304.059998  304.059998   \n",
              "9081  2022-03-23  300.510010  303.230011  297.720001  299.489990  299.489990   \n",
              "\n",
              "          Volume  \n",
              "0     1031788800  \n",
              "1      308160000  \n",
              "2      133171200  \n",
              "3       67766400  \n",
              "4       47894400  \n",
              "...          ...  \n",
              "9077    30816600  \n",
              "9078    43317000  \n",
              "9079    28351200  \n",
              "9080    27599700  \n",
              "9081    25715400  \n",
              "\n",
              "[9082 rows x 7 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-69fd5aa4-580c-4100-bdc9-7adc82ae70a6\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Adj Close</th>\n",
              "      <th>Volume</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1986-03-13</td>\n",
              "      <td>0.088542</td>\n",
              "      <td>0.101563</td>\n",
              "      <td>0.088542</td>\n",
              "      <td>0.097222</td>\n",
              "      <td>0.061434</td>\n",
              "      <td>1031788800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1986-03-14</td>\n",
              "      <td>0.097222</td>\n",
              "      <td>0.102431</td>\n",
              "      <td>0.097222</td>\n",
              "      <td>0.100694</td>\n",
              "      <td>0.063628</td>\n",
              "      <td>308160000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1986-03-17</td>\n",
              "      <td>0.100694</td>\n",
              "      <td>0.103299</td>\n",
              "      <td>0.100694</td>\n",
              "      <td>0.102431</td>\n",
              "      <td>0.064725</td>\n",
              "      <td>133171200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1986-03-18</td>\n",
              "      <td>0.102431</td>\n",
              "      <td>0.103299</td>\n",
              "      <td>0.098958</td>\n",
              "      <td>0.099826</td>\n",
              "      <td>0.063079</td>\n",
              "      <td>67766400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1986-03-19</td>\n",
              "      <td>0.099826</td>\n",
              "      <td>0.100694</td>\n",
              "      <td>0.097222</td>\n",
              "      <td>0.098090</td>\n",
              "      <td>0.061982</td>\n",
              "      <td>47894400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9077</th>\n",
              "      <td>2022-03-17</td>\n",
              "      <td>293.290009</td>\n",
              "      <td>295.609985</td>\n",
              "      <td>289.369995</td>\n",
              "      <td>295.220001</td>\n",
              "      <td>295.220001</td>\n",
              "      <td>30816600</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9078</th>\n",
              "      <td>2022-03-18</td>\n",
              "      <td>295.369995</td>\n",
              "      <td>301.000000</td>\n",
              "      <td>292.730011</td>\n",
              "      <td>300.429993</td>\n",
              "      <td>300.429993</td>\n",
              "      <td>43317000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9079</th>\n",
              "      <td>2022-03-21</td>\n",
              "      <td>298.890015</td>\n",
              "      <td>300.140015</td>\n",
              "      <td>294.899994</td>\n",
              "      <td>299.160004</td>\n",
              "      <td>299.160004</td>\n",
              "      <td>28351200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9080</th>\n",
              "      <td>2022-03-22</td>\n",
              "      <td>299.799988</td>\n",
              "      <td>305.000000</td>\n",
              "      <td>298.769989</td>\n",
              "      <td>304.059998</td>\n",
              "      <td>304.059998</td>\n",
              "      <td>27599700</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9081</th>\n",
              "      <td>2022-03-23</td>\n",
              "      <td>300.510010</td>\n",
              "      <td>303.230011</td>\n",
              "      <td>297.720001</td>\n",
              "      <td>299.489990</td>\n",
              "      <td>299.489990</td>\n",
              "      <td>25715400</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>9082 rows Ã— 7 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-69fd5aa4-580c-4100-bdc9-7adc82ae70a6')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-69fd5aa4-580c-4100-bdc9-7adc82ae70a6 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-69fd5aa4-580c-4100-bdc9-7adc82ae70a6');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = df[['Date', 'Close']]\n",
        "\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "3I6ju2n83jGq",
        "outputId": "60a496f7-b2be-439d-8c9a-b427478c6cff"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            Date       Close\n",
              "0     1986-03-13    0.097222\n",
              "1     1986-03-14    0.100694\n",
              "2     1986-03-17    0.102431\n",
              "3     1986-03-18    0.099826\n",
              "4     1986-03-19    0.098090\n",
              "...          ...         ...\n",
              "9077  2022-03-17  295.220001\n",
              "9078  2022-03-18  300.429993\n",
              "9079  2022-03-21  299.160004\n",
              "9080  2022-03-22  304.059998\n",
              "9081  2022-03-23  299.489990\n",
              "\n",
              "[9082 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3e3bc23c-2830-4012-89b0-e06bf455367e\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Close</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1986-03-13</td>\n",
              "      <td>0.097222</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1986-03-14</td>\n",
              "      <td>0.100694</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1986-03-17</td>\n",
              "      <td>0.102431</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1986-03-18</td>\n",
              "      <td>0.099826</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1986-03-19</td>\n",
              "      <td>0.098090</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9077</th>\n",
              "      <td>2022-03-17</td>\n",
              "      <td>295.220001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9078</th>\n",
              "      <td>2022-03-18</td>\n",
              "      <td>300.429993</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9079</th>\n",
              "      <td>2022-03-21</td>\n",
              "      <td>299.160004</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9080</th>\n",
              "      <td>2022-03-22</td>\n",
              "      <td>304.059998</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9081</th>\n",
              "      <td>2022-03-23</td>\n",
              "      <td>299.489990</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>9082 rows Ã— 2 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3e3bc23c-2830-4012-89b0-e06bf455367e')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-3e3bc23c-2830-4012-89b0-e06bf455367e button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-3e3bc23c-2830-4012-89b0-e06bf455367e');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['Date']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fCNhH5qH6Fc3",
        "outputId": "004e0b7a-60fe-4a21-ca5b-deda9f9132aa"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0       1986-03-13\n",
              "1       1986-03-14\n",
              "2       1986-03-17\n",
              "3       1986-03-18\n",
              "4       1986-03-19\n",
              "           ...    \n",
              "9077    2022-03-17\n",
              "9078    2022-03-18\n",
              "9079    2022-03-21\n",
              "9080    2022-03-22\n",
              "9081    2022-03-23\n",
              "Name: Date, Length: 9082, dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import datetime\n",
        "\n",
        "def str_to_datetime(s):\n",
        "  split = s.split('-')\n",
        "  year, month, day = int(split[0]), int(split[1]), int(split[2])\n",
        "  return datetime.datetime(year=year, month=month, day=day)\n",
        "\n",
        "datetime_object = str_to_datetime('1986-03-19')\n",
        "datetime_object"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZtzK_Fnd6UEP",
        "outputId": "0c289d97-44a6-4d8f-c848-29cda65ff4da"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "datetime.datetime(1986, 3, 19, 0, 0)"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "fE62iBCl-d_P",
        "outputId": "15ed6f7e-292b-4c3a-aa08-4c82731952b1"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            Date       Close\n",
              "0     1986-03-13    0.097222\n",
              "1     1986-03-14    0.100694\n",
              "2     1986-03-17    0.102431\n",
              "3     1986-03-18    0.099826\n",
              "4     1986-03-19    0.098090\n",
              "...          ...         ...\n",
              "9077  2022-03-17  295.220001\n",
              "9078  2022-03-18  300.429993\n",
              "9079  2022-03-21  299.160004\n",
              "9080  2022-03-22  304.059998\n",
              "9081  2022-03-23  299.489990\n",
              "\n",
              "[9082 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-00f22709-1673-4034-ab92-3ca393a434e5\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Close</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1986-03-13</td>\n",
              "      <td>0.097222</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1986-03-14</td>\n",
              "      <td>0.100694</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1986-03-17</td>\n",
              "      <td>0.102431</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1986-03-18</td>\n",
              "      <td>0.099826</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1986-03-19</td>\n",
              "      <td>0.098090</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9077</th>\n",
              "      <td>2022-03-17</td>\n",
              "      <td>295.220001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9078</th>\n",
              "      <td>2022-03-18</td>\n",
              "      <td>300.429993</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9079</th>\n",
              "      <td>2022-03-21</td>\n",
              "      <td>299.160004</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9080</th>\n",
              "      <td>2022-03-22</td>\n",
              "      <td>304.059998</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9081</th>\n",
              "      <td>2022-03-23</td>\n",
              "      <td>299.489990</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>9082 rows Ã— 2 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-00f22709-1673-4034-ab92-3ca393a434e5')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-00f22709-1673-4034-ab92-3ca393a434e5 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-00f22709-1673-4034-ab92-3ca393a434e5');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['Date'] = df['Date'].apply(str_to_datetime)\n",
        "df['Date']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-0LJeyey_o6t",
        "outputId": "3c547ef6-167c-4c2f-b3e3-cc74cfa347d4"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \"\"\"Entry point for launching an IPython kernel.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0      1986-03-13\n",
              "1      1986-03-14\n",
              "2      1986-03-17\n",
              "3      1986-03-18\n",
              "4      1986-03-19\n",
              "          ...    \n",
              "9077   2022-03-17\n",
              "9078   2022-03-18\n",
              "9079   2022-03-21\n",
              "9080   2022-03-22\n",
              "9081   2022-03-23\n",
              "Name: Date, Length: 9082, dtype: datetime64[ns]"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.index = df.pop('Date')\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 455
        },
        "id": "khQN7tf1BJCB",
        "outputId": "92a55bbf-81b5-458c-bd4f-66fb9044448f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                 Close\n",
              "Date                  \n",
              "1986-03-13    0.097222\n",
              "1986-03-14    0.100694\n",
              "1986-03-17    0.102431\n",
              "1986-03-18    0.099826\n",
              "1986-03-19    0.098090\n",
              "...                ...\n",
              "2022-03-17  295.220001\n",
              "2022-03-18  300.429993\n",
              "2022-03-21  299.160004\n",
              "2022-03-22  304.059998\n",
              "2022-03-23  299.489990\n",
              "\n",
              "[9082 rows x 1 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-77a7f340-3560-4ac9-a9f1-5bfbd9f3bf63\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Close</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1986-03-13</th>\n",
              "      <td>0.097222</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1986-03-14</th>\n",
              "      <td>0.100694</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1986-03-17</th>\n",
              "      <td>0.102431</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1986-03-18</th>\n",
              "      <td>0.099826</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1986-03-19</th>\n",
              "      <td>0.098090</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-03-17</th>\n",
              "      <td>295.220001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-03-18</th>\n",
              "      <td>300.429993</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-03-21</th>\n",
              "      <td>299.160004</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-03-22</th>\n",
              "      <td>304.059998</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-03-23</th>\n",
              "      <td>299.489990</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>9082 rows Ã— 1 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-77a7f340-3560-4ac9-a9f1-5bfbd9f3bf63')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-77a7f340-3560-4ac9-a9f1-5bfbd9f3bf63 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-77a7f340-3560-4ac9-a9f1-5bfbd9f3bf63');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "plt.plot(df.index, df['Close'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "17OZExfcBWzD",
        "outputId": "d8d740dd-9613-4703-98a8-4e3489646da1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7fac00b6de50>]"
            ]
          },
          "metadata": {},
          "execution_count": 10
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "def df_to_windowed_df(dataframe, first_date_str, last_date_str, n=3):\n",
        "  first_date = str_to_datetime(first_date_str)\n",
        "  last_date  = str_to_datetime(last_date_str)\n",
        "\n",
        "  target_date = first_date\n",
        "  \n",
        "  dates = []\n",
        "  X, Y = [], []\n",
        "\n",
        "  last_time = False\n",
        "  while True:\n",
        "    df_subset = dataframe.loc[:target_date].tail(n+1)\n",
        "    \n",
        "    if len(df_subset) != n+1:\n",
        "      print(f'Error: Window of size {n} is too large for date {target_date}')\n",
        "      return\n",
        "\n",
        "    values = df_subset['Close'].to_numpy()\n",
        "    x, y = values[:-1], values[-1]\n",
        "\n",
        "    dates.append(target_date)\n",
        "    X.append(x)\n",
        "    Y.append(y)\n",
        "\n",
        "    next_week = dataframe.loc[target_date:target_date+datetime.timedelta(days=7)]\n",
        "    next_datetime_str = str(next_week.head(2).tail(1).index.values[0])\n",
        "    next_date_str = next_datetime_str.split('T')[0]\n",
        "    year_month_day = next_date_str.split('-')\n",
        "    year, month, day = year_month_day\n",
        "    next_date = datetime.datetime(day=int(day), month=int(month), year=int(year))\n",
        "    \n",
        "    if last_time:\n",
        "      break\n",
        "    \n",
        "    target_date = next_date\n",
        "\n",
        "    if target_date == last_date:\n",
        "      last_time = True\n",
        "    \n",
        "  ret_df = pd.DataFrame({})\n",
        "  ret_df['Target Date'] = dates\n",
        "  \n",
        "  X = np.array(X)\n",
        "  for i in range(0, n):\n",
        "    X[:, i]\n",
        "    ret_df[f'Target-{n-i}'] = X[:, i]\n",
        "  \n",
        "  ret_df['Target'] = Y\n",
        "\n",
        "  return ret_df\n",
        "\n",
        "# Start day second time around: '2021-03-25'\n",
        "windowed_df = df_to_windowed_df(df, \n",
        "                                '2021-03-25', \n",
        "                                '2022-03-23', \n",
        "                                n=3)\n",
        "windowed_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "fsU9d3u0HdYj",
        "outputId": "f2941d9b-74b0-489c-9a6c-03063c3258a4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Target Date    Target-3    Target-2    Target-1      Target\n",
              "0    2021-03-25  235.990005  237.580002  235.460007  232.339996\n",
              "1    2021-03-26  237.580002  235.460007  232.339996  236.479996\n",
              "2    2021-03-29  235.460007  232.339996  236.479996  235.240005\n",
              "3    2021-03-30  232.339996  236.479996  235.240005  231.850006\n",
              "4    2021-03-31  236.479996  235.240005  231.850006  235.770004\n",
              "..          ...         ...         ...         ...         ...\n",
              "247  2022-03-17  276.440002  287.149994  294.390015  295.220001\n",
              "248  2022-03-18  287.149994  294.390015  295.220001  300.429993\n",
              "249  2022-03-21  294.390015  295.220001  300.429993  299.160004\n",
              "250  2022-03-22  295.220001  300.429993  299.160004  304.059998\n",
              "251  2022-03-23  300.429993  299.160004  304.059998  299.489990\n",
              "\n",
              "[252 rows x 5 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6e8c554f-3742-49df-b611-9f7236b15592\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Target Date</th>\n",
              "      <th>Target-3</th>\n",
              "      <th>Target-2</th>\n",
              "      <th>Target-1</th>\n",
              "      <th>Target</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2021-03-25</td>\n",
              "      <td>235.990005</td>\n",
              "      <td>237.580002</td>\n",
              "      <td>235.460007</td>\n",
              "      <td>232.339996</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2021-03-26</td>\n",
              "      <td>237.580002</td>\n",
              "      <td>235.460007</td>\n",
              "      <td>232.339996</td>\n",
              "      <td>236.479996</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2021-03-29</td>\n",
              "      <td>235.460007</td>\n",
              "      <td>232.339996</td>\n",
              "      <td>236.479996</td>\n",
              "      <td>235.240005</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2021-03-30</td>\n",
              "      <td>232.339996</td>\n",
              "      <td>236.479996</td>\n",
              "      <td>235.240005</td>\n",
              "      <td>231.850006</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2021-03-31</td>\n",
              "      <td>236.479996</td>\n",
              "      <td>235.240005</td>\n",
              "      <td>231.850006</td>\n",
              "      <td>235.770004</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>247</th>\n",
              "      <td>2022-03-17</td>\n",
              "      <td>276.440002</td>\n",
              "      <td>287.149994</td>\n",
              "      <td>294.390015</td>\n",
              "      <td>295.220001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>248</th>\n",
              "      <td>2022-03-18</td>\n",
              "      <td>287.149994</td>\n",
              "      <td>294.390015</td>\n",
              "      <td>295.220001</td>\n",
              "      <td>300.429993</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>249</th>\n",
              "      <td>2022-03-21</td>\n",
              "      <td>294.390015</td>\n",
              "      <td>295.220001</td>\n",
              "      <td>300.429993</td>\n",
              "      <td>299.160004</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>250</th>\n",
              "      <td>2022-03-22</td>\n",
              "      <td>295.220001</td>\n",
              "      <td>300.429993</td>\n",
              "      <td>299.160004</td>\n",
              "      <td>304.059998</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>251</th>\n",
              "      <td>2022-03-23</td>\n",
              "      <td>300.429993</td>\n",
              "      <td>299.160004</td>\n",
              "      <td>304.059998</td>\n",
              "      <td>299.489990</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>252 rows Ã— 5 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6e8c554f-3742-49df-b611-9f7236b15592')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-6e8c554f-3742-49df-b611-9f7236b15592 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-6e8c554f-3742-49df-b611-9f7236b15592');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def windowed_df_to_date_X_y(windowed_dataframe):\n",
        "  df_as_np = windowed_dataframe.to_numpy()\n",
        "\n",
        "  dates = df_as_np[:, 0]\n",
        "\n",
        "  middle_matrix = df_as_np[:, 1:-1]\n",
        "  X = middle_matrix.reshape((len(dates), middle_matrix.shape[1], 1))\n",
        "\n",
        "  Y = df_as_np[:, -1]\n",
        "\n",
        "  return dates, X.astype(np.float32), Y.astype(np.float32)\n",
        "\n",
        "dates, X, y = windowed_df_to_date_X_y(windowed_df)\n",
        "\n",
        "dates.shape, X.shape, y.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uD17zIbaIZ6n",
        "outputId": "6e4f0927-7e44-4004-b2f8-a268d0f44b43"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((252,), (252, 3, 1), (252,))"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "q_80 = int(len(dates) * .8)\n",
        "q_90 = int(len(dates) * .9)\n",
        "\n",
        "dates_train, X_train, y_train = dates[:q_80], X[:q_80], y[:q_80]\n",
        "\n",
        "dates_val, X_val, y_val = dates[q_80:q_90], X[q_80:q_90], y[q_80:q_90]\n",
        "dates_test, X_test, y_test = dates[q_90:], X[q_90:], y[q_90:]\n",
        "\n",
        "plt.plot(dates_train, y_train)\n",
        "plt.plot(dates_val, y_val)\n",
        "plt.plot(dates_test, y_test)\n",
        "\n",
        "plt.legend(['Train', 'Validation', 'Test'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "LPHWfwZeMZSS",
        "outputId": "6077e3ae-00d9-4437-d195-c4108884bb16"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7fac00627f10>"
            ]
          },
          "metadata": {},
          "execution_count": 13
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "from tensorflow.keras import layers\n",
        "\n",
        "model = Sequential([layers.Input((3, 1)),\n",
        "                    layers.LSTM(64),\n",
        "                    layers.Dense(32, activation='relu'),\n",
        "                    layers.Dense(32, activation='relu'),\n",
        "                    layers.Dense(1)])\n",
        "\n",
        "model.compile(loss='mse', \n",
        "              optimizer=Adam(learning_rate=0.001),\n",
        "              metrics=['mean_absolute_error'])\n",
        "\n",
        "model.fit(X_train, y_train, validation_data=(X_val, y_val), epochs=100)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PGiLbQIYOawE",
        "outputId": "c40ecbaf-4d8a-449b-c2ff-23cbb14f8bb8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/100\n",
            "7/7 [==============================] - 3s 128ms/step - loss: 84485.2422 - mean_absolute_error: 288.9212 - val_loss: 92096.5703 - val_mean_absolute_error: 303.3869\n",
            "Epoch 2/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 84140.1406 - mean_absolute_error: 288.3217 - val_loss: 91741.1797 - val_mean_absolute_error: 302.8006\n",
            "Epoch 3/100\n",
            "7/7 [==============================] - 0s 7ms/step - loss: 83791.5703 - mean_absolute_error: 287.7167 - val_loss: 91335.4922 - val_mean_absolute_error: 302.1300\n",
            "Epoch 4/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 83354.7578 - mean_absolute_error: 286.9539 - val_loss: 90786.8906 - val_mean_absolute_error: 301.2207\n",
            "Epoch 5/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 82823.5547 - mean_absolute_error: 286.0313 - val_loss: 90245.3594 - val_mean_absolute_error: 300.3205\n",
            "Epoch 6/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 82301.8906 - mean_absolute_error: 285.1146 - val_loss: 89644.8672 - val_mean_absolute_error: 299.3190\n",
            "Epoch 7/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 81684.1562 - mean_absolute_error: 284.0322 - val_loss: 88911.4609 - val_mean_absolute_error: 298.0914\n",
            "Epoch 8/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 80890.0234 - mean_absolute_error: 282.6171 - val_loss: 87790.8672 - val_mean_absolute_error: 296.2057\n",
            "Epoch 9/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 79483.3359 - mean_absolute_error: 280.1273 - val_loss: 85808.9688 - val_mean_absolute_error: 292.8412\n",
            "Epoch 10/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 77636.8047 - mean_absolute_error: 276.8044 - val_loss: 83965.0000 - val_mean_absolute_error: 289.6757\n",
            "Epoch 11/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 75808.5703 - mean_absolute_error: 273.4899 - val_loss: 81839.2188 - val_mean_absolute_error: 285.9829\n",
            "Epoch 12/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 73639.7734 - mean_absolute_error: 269.4993 - val_loss: 79303.8359 - val_mean_absolute_error: 281.5152\n",
            "Epoch 13/100\n",
            "7/7 [==============================] - 0s 9ms/step - loss: 71022.1250 - mean_absolute_error: 264.5865 - val_loss: 76145.6562 - val_mean_absolute_error: 275.8490\n",
            "Epoch 14/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 67967.1406 - mean_absolute_error: 258.7244 - val_loss: 72759.6250 - val_mean_absolute_error: 269.6415\n",
            "Epoch 15/100\n",
            "7/7 [==============================] - 0s 10ms/step - loss: 64304.2422 - mean_absolute_error: 251.5731 - val_loss: 67987.4375 - val_mean_absolute_error: 260.6423\n",
            "Epoch 16/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 59748.9766 - mean_absolute_error: 242.3613 - val_loss: 63226.1211 - val_mean_absolute_error: 251.3425\n",
            "Epoch 17/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 55009.0977 - mean_absolute_error: 232.3091 - val_loss: 57768.0586 - val_mean_absolute_error: 240.2396\n",
            "Epoch 18/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 49890.9648 - mean_absolute_error: 221.0498 - val_loss: 52305.3047 - val_mean_absolute_error: 228.5877\n",
            "Epoch 19/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 44628.4609 - mean_absolute_error: 208.7936 - val_loss: 46195.1016 - val_mean_absolute_error: 214.8066\n",
            "Epoch 20/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 38648.5742 - mean_absolute_error: 193.9301 - val_loss: 39676.0117 - val_mean_absolute_error: 199.0552\n",
            "Epoch 21/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 32707.9297 - mean_absolute_error: 177.9620 - val_loss: 33335.2266 - val_mean_absolute_error: 182.4342\n",
            "Epoch 22/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 26979.4707 - mean_absolute_error: 161.1629 - val_loss: 27359.3574 - val_mean_absolute_error: 165.2465\n",
            "Epoch 23/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 21647.3633 - mean_absolute_error: 143.5797 - val_loss: 21693.4570 - val_mean_absolute_error: 147.1070\n",
            "Epoch 24/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 16671.1836 - mean_absolute_error: 125.0106 - val_loss: 16357.0088 - val_mean_absolute_error: 127.6868\n",
            "Epoch 25/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 12113.8682 - mean_absolute_error: 105.1542 - val_loss: 11629.5166 - val_mean_absolute_error: 107.5940\n",
            "Epoch 26/100\n",
            "7/7 [==============================] - 0s 9ms/step - loss: 8302.3125 - mean_absolute_error: 85.1291 - val_loss: 7707.8906 - val_mean_absolute_error: 87.4925\n",
            "Epoch 27/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 5358.4297 - mean_absolute_error: 65.7451 - val_loss: 4918.3506 - val_mean_absolute_error: 69.7523\n",
            "Epoch 28/100\n",
            "7/7 [==============================] - 0s 7ms/step - loss: 3387.1655 - mean_absolute_error: 49.1133 - val_loss: 2946.3948 - val_mean_absolute_error: 53.7894\n",
            "Epoch 29/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 2118.4629 - mean_absolute_error: 37.1601 - val_loss: 1611.2075 - val_mean_absolute_error: 39.4746\n",
            "Epoch 30/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 1442.4238 - mean_absolute_error: 31.7118 - val_loss: 887.9327 - val_mean_absolute_error: 28.8958\n",
            "Epoch 31/100\n",
            "7/7 [==============================] - 0s 9ms/step - loss: 1119.6783 - mean_absolute_error: 28.4543 - val_loss: 522.0117 - val_mean_absolute_error: 21.6575\n",
            "Epoch 32/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 1028.1116 - mean_absolute_error: 27.1760 - val_loss: 328.6438 - val_mean_absolute_error: 16.6036\n",
            "Epoch 33/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 1016.2343 - mean_absolute_error: 26.9163 - val_loss: 238.3474 - val_mean_absolute_error: 13.7841\n",
            "Epoch 34/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 1013.9369 - mean_absolute_error: 26.9356 - val_loss: 205.8949 - val_mean_absolute_error: 12.6350\n",
            "Epoch 35/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 1016.4923 - mean_absolute_error: 26.9464 - val_loss: 200.4167 - val_mean_absolute_error: 12.4293\n",
            "Epoch 36/100\n",
            "7/7 [==============================] - 0s 9ms/step - loss: 1016.6917 - mean_absolute_error: 26.9461 - val_loss: 214.2280 - val_mean_absolute_error: 12.9408\n",
            "Epoch 37/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 1014.2210 - mean_absolute_error: 26.9226 - val_loss: 226.0951 - val_mean_absolute_error: 13.3631\n",
            "Epoch 38/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 1013.5067 - mean_absolute_error: 26.9105 - val_loss: 237.9849 - val_mean_absolute_error: 13.7718\n",
            "Epoch 39/100\n",
            "7/7 [==============================] - 0s 7ms/step - loss: 1011.5020 - mean_absolute_error: 26.8892 - val_loss: 237.2254 - val_mean_absolute_error: 13.7461\n",
            "Epoch 40/100\n",
            "7/7 [==============================] - 0s 9ms/step - loss: 1011.4430 - mean_absolute_error: 26.8899 - val_loss: 248.2505 - val_mean_absolute_error: 14.1143\n",
            "Epoch 41/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 1011.6320 - mean_absolute_error: 26.8859 - val_loss: 259.9933 - val_mean_absolute_error: 14.4952\n",
            "Epoch 42/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 1010.4210 - mean_absolute_error: 26.8666 - val_loss: 269.3950 - val_mean_absolute_error: 14.7925\n",
            "Epoch 43/100\n",
            "7/7 [==============================] - 0s 7ms/step - loss: 1010.3962 - mean_absolute_error: 26.8648 - val_loss: 264.2271 - val_mean_absolute_error: 14.6299\n",
            "Epoch 44/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 1009.9718 - mean_absolute_error: 26.8546 - val_loss: 268.2726 - val_mean_absolute_error: 14.7573\n",
            "Epoch 45/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 1009.9713 - mean_absolute_error: 26.8587 - val_loss: 268.0790 - val_mean_absolute_error: 14.7513\n",
            "Epoch 46/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 1010.9688 - mean_absolute_error: 26.8649 - val_loss: 283.6888 - val_mean_absolute_error: 15.2323\n",
            "Epoch 47/100\n",
            "7/7 [==============================] - 0s 10ms/step - loss: 1010.0258 - mean_absolute_error: 26.8625 - val_loss: 281.7386 - val_mean_absolute_error: 15.1731\n",
            "Epoch 48/100\n",
            "7/7 [==============================] - 0s 7ms/step - loss: 1011.3054 - mean_absolute_error: 26.8835 - val_loss: 294.0790 - val_mean_absolute_error: 15.5435\n",
            "Epoch 49/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 1009.7667 - mean_absolute_error: 26.8615 - val_loss: 304.9700 - val_mean_absolute_error: 15.8901\n",
            "Epoch 50/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 988.6861 - mean_absolute_error: 26.6852 - val_loss: 352.5001 - val_mean_absolute_error: 17.3815\n",
            "Epoch 51/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 967.0628 - mean_absolute_error: 26.3069 - val_loss: 376.3456 - val_mean_absolute_error: 18.0131\n",
            "Epoch 52/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 974.9468 - mean_absolute_error: 26.4625 - val_loss: 376.3969 - val_mean_absolute_error: 18.0787\n",
            "Epoch 53/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 918.3086 - mean_absolute_error: 25.6673 - val_loss: 401.1248 - val_mean_absolute_error: 18.7719\n",
            "Epoch 54/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 897.8353 - mean_absolute_error: 25.3379 - val_loss: 209.8297 - val_mean_absolute_error: 12.8813\n",
            "Epoch 55/100\n",
            "7/7 [==============================] - 0s 7ms/step - loss: 886.8141 - mean_absolute_error: 25.1998 - val_loss: 317.8036 - val_mean_absolute_error: 16.3982\n",
            "Epoch 56/100\n",
            "7/7 [==============================] - 0s 7ms/step - loss: 822.9063 - mean_absolute_error: 23.8772 - val_loss: 199.9270 - val_mean_absolute_error: 12.5864\n",
            "Epoch 57/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 694.1432 - mean_absolute_error: 22.1170 - val_loss: 231.6207 - val_mean_absolute_error: 13.7638\n",
            "Epoch 58/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 638.3762 - mean_absolute_error: 21.1369 - val_loss: 290.5842 - val_mean_absolute_error: 15.8060\n",
            "Epoch 59/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 613.4904 - mean_absolute_error: 20.6316 - val_loss: 268.7232 - val_mean_absolute_error: 15.1319\n",
            "Epoch 60/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 584.0606 - mean_absolute_error: 20.4295 - val_loss: 173.8270 - val_mean_absolute_error: 11.7225\n",
            "Epoch 61/100\n",
            "7/7 [==============================] - 0s 10ms/step - loss: 553.4114 - mean_absolute_error: 19.6481 - val_loss: 137.3406 - val_mean_absolute_error: 10.1721\n",
            "Epoch 62/100\n",
            "7/7 [==============================] - 0s 7ms/step - loss: 509.1026 - mean_absolute_error: 18.8918 - val_loss: 217.2077 - val_mean_absolute_error: 13.4241\n",
            "Epoch 63/100\n",
            "7/7 [==============================] - 0s 13ms/step - loss: 491.2473 - mean_absolute_error: 18.7278 - val_loss: 370.0826 - val_mean_absolute_error: 18.3015\n",
            "Epoch 64/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 475.7995 - mean_absolute_error: 17.9953 - val_loss: 139.9181 - val_mean_absolute_error: 10.3576\n",
            "Epoch 65/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 423.3214 - mean_absolute_error: 16.9107 - val_loss: 73.6801 - val_mean_absolute_error: 6.9984\n",
            "Epoch 66/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 402.2423 - mean_absolute_error: 16.8707 - val_loss: 117.2473 - val_mean_absolute_error: 9.3374\n",
            "Epoch 67/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 349.8729 - mean_absolute_error: 15.3443 - val_loss: 59.4148 - val_mean_absolute_error: 6.1827\n",
            "Epoch 68/100\n",
            "7/7 [==============================] - 0s 9ms/step - loss: 328.2045 - mean_absolute_error: 15.0914 - val_loss: 55.6569 - val_mean_absolute_error: 5.9754\n",
            "Epoch 69/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 318.6749 - mean_absolute_error: 14.8869 - val_loss: 320.6263 - val_mean_absolute_error: 17.0090\n",
            "Epoch 70/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 321.3608 - mean_absolute_error: 15.1830 - val_loss: 160.5556 - val_mean_absolute_error: 11.3644\n",
            "Epoch 71/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 265.0318 - mean_absolute_error: 13.3335 - val_loss: 102.1275 - val_mean_absolute_error: 8.6511\n",
            "Epoch 72/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 213.1665 - mean_absolute_error: 11.7374 - val_loss: 90.7427 - val_mean_absolute_error: 8.0638\n",
            "Epoch 73/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 188.0960 - mean_absolute_error: 10.8897 - val_loss: 34.4535 - val_mean_absolute_error: 5.0526\n",
            "Epoch 74/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 167.6227 - mean_absolute_error: 10.2677 - val_loss: 50.6604 - val_mean_absolute_error: 5.8328\n",
            "Epoch 75/100\n",
            "7/7 [==============================] - 0s 12ms/step - loss: 138.2498 - mean_absolute_error: 9.1250 - val_loss: 40.5443 - val_mean_absolute_error: 5.3391\n",
            "Epoch 76/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 119.5291 - mean_absolute_error: 8.2181 - val_loss: 33.8241 - val_mean_absolute_error: 4.8457\n",
            "Epoch 77/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 113.6823 - mean_absolute_error: 8.3122 - val_loss: 39.9230 - val_mean_absolute_error: 5.1885\n",
            "Epoch 78/100\n",
            "7/7 [==============================] - 0s 10ms/step - loss: 102.3838 - mean_absolute_error: 8.0206 - val_loss: 30.1612 - val_mean_absolute_error: 4.8544\n",
            "Epoch 79/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 79.4603 - mean_absolute_error: 6.6789 - val_loss: 30.0392 - val_mean_absolute_error: 4.8503\n",
            "Epoch 80/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 70.2241 - mean_absolute_error: 6.2605 - val_loss: 32.0833 - val_mean_absolute_error: 4.9526\n",
            "Epoch 81/100\n",
            "7/7 [==============================] - 0s 9ms/step - loss: 60.7669 - mean_absolute_error: 5.9288 - val_loss: 30.6478 - val_mean_absolute_error: 4.8193\n",
            "Epoch 82/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 53.4387 - mean_absolute_error: 5.4452 - val_loss: 30.3131 - val_mean_absolute_error: 4.8228\n",
            "Epoch 83/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 56.6721 - mean_absolute_error: 5.8411 - val_loss: 30.6400 - val_mean_absolute_error: 4.8332\n",
            "Epoch 84/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 43.4102 - mean_absolute_error: 4.9429 - val_loss: 33.2471 - val_mean_absolute_error: 4.8586\n",
            "Epoch 85/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 40.8041 - mean_absolute_error: 4.8197 - val_loss: 38.5653 - val_mean_absolute_error: 4.9945\n",
            "Epoch 86/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 39.6156 - mean_absolute_error: 4.8304 - val_loss: 54.7612 - val_mean_absolute_error: 5.7870\n",
            "Epoch 87/100\n",
            "7/7 [==============================] - 0s 11ms/step - loss: 42.2484 - mean_absolute_error: 5.2048 - val_loss: 56.8533 - val_mean_absolute_error: 5.8975\n",
            "Epoch 88/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 31.6641 - mean_absolute_error: 4.3982 - val_loss: 51.1803 - val_mean_absolute_error: 5.6558\n",
            "Epoch 89/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 31.2557 - mean_absolute_error: 4.3786 - val_loss: 62.4088 - val_mean_absolute_error: 6.1834\n",
            "Epoch 90/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 31.1858 - mean_absolute_error: 4.4319 - val_loss: 42.4791 - val_mean_absolute_error: 5.1998\n",
            "Epoch 91/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 33.3480 - mean_absolute_error: 4.6152 - val_loss: 31.9287 - val_mean_absolute_error: 4.7831\n",
            "Epoch 92/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 28.1418 - mean_absolute_error: 4.1592 - val_loss: 33.6048 - val_mean_absolute_error: 4.8325\n",
            "Epoch 93/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 24.1242 - mean_absolute_error: 3.8665 - val_loss: 35.4133 - val_mean_absolute_error: 4.8573\n",
            "Epoch 94/100\n",
            "7/7 [==============================] - 0s 11ms/step - loss: 23.3570 - mean_absolute_error: 3.7500 - val_loss: 37.1745 - val_mean_absolute_error: 4.9081\n",
            "Epoch 95/100\n",
            "7/7 [==============================] - 0s 9ms/step - loss: 22.7438 - mean_absolute_error: 3.7759 - val_loss: 37.0721 - val_mean_absolute_error: 4.9011\n",
            "Epoch 96/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 25.2444 - mean_absolute_error: 3.8896 - val_loss: 35.0618 - val_mean_absolute_error: 4.8426\n",
            "Epoch 97/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 23.8992 - mean_absolute_error: 3.8146 - val_loss: 49.9345 - val_mean_absolute_error: 5.6577\n",
            "Epoch 98/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 21.1636 - mean_absolute_error: 3.6486 - val_loss: 40.7911 - val_mean_absolute_error: 5.1001\n",
            "Epoch 99/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 20.4544 - mean_absolute_error: 3.5850 - val_loss: 34.4257 - val_mean_absolute_error: 4.8253\n",
            "Epoch 100/100\n",
            "7/7 [==============================] - 0s 8ms/step - loss: 20.9248 - mean_absolute_error: 3.6145 - val_loss: 41.2979 - val_mean_absolute_error: 5.1370\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7fab85990c10>"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_predictions = model.predict(X_train).flatten()\n",
        "\n",
        "plt.plot(dates_train, train_predictions)\n",
        "plt.plot(dates_train, y_train)\n",
        "plt.legend(['Training Predictions', 'Training Observations'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "gG8eOTzEVl_X",
        "outputId": "e1b7ac61-67bd-4129-f99a-e0dd26a616a6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7fab80d8cb50>"
            ]
          },
          "metadata": {},
          "execution_count": 15
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "val_predictions = model.predict(X_val).flatten()\n",
        "\n",
        "plt.plot(dates_val, val_predictions)\n",
        "plt.plot(dates_val, y_val)\n",
        "plt.legend(['Validation Predictions', 'Validation Observations'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "UrRaAUbnWBhE",
        "outputId": "920be408-302f-4aa9-d05a-74f097b99f09"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f7a4775b7d0>"
            ]
          },
          "metadata": {},
          "execution_count": 37
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "test_predictions = model.predict(X_test).flatten()\n",
        "\n",
        "plt.plot(dates_test, test_predictions)\n",
        "plt.plot(dates_test, y_test)\n",
        "plt.legend(['Testing Predictions', 'Testing Observations'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "wF5sDSxVWLFd",
        "outputId": "7204895d-1b76-4848-c3d2-38de1c9a4a12"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f7a476dce90>"
            ]
          },
          "metadata": {},
          "execution_count": 38
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(dates_train, train_predictions)\n",
        "plt.plot(dates_train, y_train)\n",
        "plt.plot(dates_val, val_predictions)\n",
        "plt.plot(dates_val, y_val)\n",
        "plt.plot(dates_test, test_predictions)\n",
        "plt.plot(dates_test, y_test)\n",
        "plt.legend(['Training Predictions', \n",
        "            'Training Observations',\n",
        "            'Validation Predictions', \n",
        "            'Validation Observations',\n",
        "            'Testing Predictions', \n",
        "            'Testing Observations'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "8b-JsTvEWfAm",
        "outputId": "397ff0c8-f604-4c2b-b10a-9fd41f7b4816"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f7a477271d0>"
            ]
          },
          "metadata": {},
          "execution_count": 39
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from copy import deepcopy\n",
        "\n",
        "recursive_predictions = []\n",
        "recursive_dates = np.concatenate([dates_val, dates_test])\n",
        "\n",
        "for target_date in recursive_dates:\n",
        "  last_window = deepcopy(X_train[-1])\n",
        "  next_prediction = model.predict(np.array([last_window])).flatten()\n",
        "  recursive_predictions.append(next_prediction)\n",
        "  last_window[-1] = next_prediction"
      ],
      "metadata": {
        "id": "qb0ryudqWwkf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(dates_train, train_predictions)\n",
        "plt.plot(dates_train, y_train)\n",
        "plt.plot(dates_val, val_predictions)\n",
        "plt.plot(dates_val, y_val)\n",
        "plt.plot(dates_test, test_predictions)\n",
        "plt.plot(dates_test, y_test)\n",
        "plt.plot(recursive_dates, recursive_predictions)\n",
        "plt.legend(['Training Predictions', \n",
        "            'Training Observations',\n",
        "            'Validation Predictions', \n",
        "            'Validation Observations',\n",
        "            'Testing Predictions', \n",
        "            'Testing Observations',\n",
        "            'Recursive Predictions'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "6BEMkYmtbwkg",
        "outputId": "b23e3f2b-6966-404a-fb6e-eae1f893409a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f7a4a87bc10>"
            ]
          },
          "metadata": {},
          "execution_count": 42
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}
